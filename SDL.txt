#include <SDL.h>
#include <stdio.h>

#define WINDOW_WIDTH 300
#define WINDOW_HEIGHT 300
#define TILE_SIZE (WINDOW_WIDTH / 3)

// Represents the position of the empty tile
int emptyTileX = 2;
int emptyTileY = 2;

// Initialize SDL and create a window and renderer
int initSDL(SDL_Window **window, SDL_Renderer **renderer) {
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
        return 0;
    }
    *window = SDL_CreateWindow("Sliding Puzzle", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WINDOW_WIDTH, WINDOW_HEIGHT, SDL_WINDOW_SHOWN);
    if (!*window) {
        printf("Window could not be created! SDL_Error: %s\n", SDL_GetError());
        return 0;
    }
    *renderer = SDL_CreateRenderer(*window, -1, SDL_RENDERER_ACCELERATED);
    if (!*renderer) {
        printf("Renderer could not be created! SDL_Error: %s\n", SDL_GetError());
        return 0;
    }
    return 1;
}

// Draw the puzzle grid with the empty tile in white and others in blue
void drawPuzzle(SDL_Renderer *renderer) {
    SDL_SetRenderDrawColor(renderer, 0, 0, 255, 255); // Blue background
    SDL_RenderClear(renderer);

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (i == emptyTileY && j == emptyTileX) {
                SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255); // White tile for the empty space
            } else {
                SDL_SetRenderDrawColor(renderer, 0, 0, 255, 255); // Blue tile for others
            }
            SDL_Rect rect = {j * TILE_SIZE, i * TILE_SIZE, TILE_SIZE, TILE_SIZE};
            SDL_RenderFillRect(renderer, &rect);
        }
    }
}

// Move the empty tile based on arrow key input
void moveTile(int dx, int dy) {
    int newX = emptyTileX + dx;
    int newY = emptyTileY + dy;
    if (newX >= 0 && newX < 3 && newY >= 0 && newY < 3) {
        emptyTileX = newX;
        emptyTileY = newY;
    }
}

int main(int argc, char *argv[]){
    SDL_Window *window = NULL;
    SDL_Renderer *renderer = NULL;
    if (!initSDL(&window, &renderer)) return -1;

    int quit = 0;
    SDL_Event e;

    while (!quit) {
        while (SDL_PollEvent(&e) != 0) {
            if (e.type == SDL_QUIT) {
                quit = 1;
            } else if (e.type == SDL_KEYDOWN) {
                switch (e.key.keysym.sym) {
                    case SDLK_UP:    moveTile(0, -1); break;
                    case SDLK_DOWN:  moveTile(0, 1); break;
                    case SDLK_LEFT:  moveTile(-1, 0); break;
                    case SDLK_RIGHT: moveTile(1, 0); break;
                }
            }
        }

        drawPuzzle(renderer);
        SDL_RenderPresent(renderer);
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}
