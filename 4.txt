#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TAILLE 3
const char init[TAILLE][TAILLE] = {{'2', '8', '3'}, {'1', '6', '4'}, {'7', ' ', '5'}};
const char fin[TAILLE][TAILLE] = {{'1', '2', '3'}, {'8', ' ', '4'}, {'7', '6', '5'}};

typedef struct {
    char matrice[TAILLE][TAILLE];
} etat;

typedef struct Noeud {
    struct Noeud* suivant;
    etat Etat;
    int g;
    int h;
} noeud;

typedef struct {
    noeud* debut;
    noeud* fin;
} liste;

liste listeNoeuds;
liste NoeudsDejaTraites;
etat etatInitial;
etat etatFinal;
int Taille(liste l){
    noeud* temp = l.debut;
    int longeur =0;
    if(temp == NULL){
        return 0;
    }
    if(temp != NULL && temp->suivant == NULL){
        return 1;
    }
    if(temp->suivant != NULL){
    while(temp->suivant != NULL ){
        longeur++;
        temp = temp->suivant;
    }
    }
    return longeur;
}

void initialiserListe(liste* l) {
    l->debut = l->fin = NULL;
}

void initialiserEtat(etat* e, const char data[TAILLE][TAILLE]) {
    for (int i = 0; i < TAILLE; i++) {
        for (int j = 0; j < TAILLE; j++) {
            e->matrice[i][j] = data[i][j];
        }
    }
}

void inserer(etat etatCourant, liste* l) {
    noeud* nouveauNoeud = (noeud*)malloc(sizeof(noeud));
    nouveauNoeud->g = 0;
    nouveauNoeud->h = h(etatCourant);
    if (!nouveauNoeud) {
        printf("Erreur d'allocation mémoire.\n");
        exit(1);
    }
    nouveauNoeud->Etat = etatCourant;
    nouveauNoeud->suivant = NULL;
    if (l->fin == NULL) {
        l->debut = l->fin = nouveauNoeud;
    } else {
        l->fin->suivant = nouveauNoeud;
        l->fin = nouveauNoeud;
    }
    //afficherEtat(l->debut->Etat);
}
void inserer2(etat etatCourant, liste* l, int g,int h) {
    noeud* nouveauNoeud = (noeud*)malloc(sizeof(noeud));
    if (!nouveauNoeud) {
        printf("Erreur d'allocation mémoire.\n");
        exit(1);
    }
    nouveauNoeud->Etat = etatCourant;
    nouveauNoeud->suivant = NULL;
    nouveauNoeud->g = g;
    nouveauNoeud->h = h;

    if (l->fin == NULL) {
        l->debut = l->fin = nouveauNoeud;
    } else {
        l->fin->suivant = nouveauNoeud;
        l->fin = nouveauNoeud;
    }
    //afficherEtat(l->debut->Etat);
}
noeud* extraire(liste* l) {
    if (l->debut == NULL) {
        printf("Liste vide, impossible d'extraire.\n");
        exit(1);
    }

    noeud* temp = l->debut;
    l->debut = l->debut->suivant;
    if (l->debut == NULL) {
        l->fin = NULL;
    }
    return temp; // Retourne le pointeur vers le nœud extrait
}


void swap(char *a, char *b) {
    char temp = *a;
    *a = *b;
    *b = temp;
}
void swapNodeData(noeud* a, noeud* b) {
    if (a == NULL || b == NULL) {
        return; // Vérifie si l'un des nœuds est NULL
    }

    // Échange des données (etat) entre a et b
    etat temp = a->Etat;
    a->Etat = b->Etat;
    b->Etat = temp;

    // Échange optionnel des valeurs g et h si désiré
    int tempG = a->g;
    a->g = b->g;
    b->g = tempG;

    int tempH = a->h;
    a->h = b->h;
    b->h = tempH;
}

void genereSuccesseurs(noeud* n, liste* listeNoeuds) {
    int videX = -1, videY = -1;
    etat e;

    // Trouver la position de la case vide
    for (int i = 0; i < TAILLE; i++) {
        for (int j = 0; j < TAILLE; j++) {
            if (n->Etat.matrice[i][j] == ' ') {
                videX = i;
                videY = j;
                break;
            }
        }
        if (videX != -1) break;
    }

    // Générer les successeurs
    // R1: Déplacer la case vide à droite
    if (videY + 1 < TAILLE) {
        e = n->Etat;
        swap(&e.matrice[videX][videY], &e.matrice[videX][videY + 1]);
        inserer2(e, listeNoeuds, n->g + 1, h(e));

    }

    // R2: Déplacer la case vide à gauche
    if (videY - 1 >= 0) {
        e = n->Etat;
        swap(&e.matrice[videX][videY], &e.matrice[videX][videY - 1]);
        inserer2(e, listeNoeuds, n->g + 1, h(e));

    }

    // R3: Déplacer la case vide vers le haut
    if (videX - 1 >= 0) {
        e = n->Etat;
        swap(&e.matrice[videX][videY], &e.matrice[videX - 1][videY]);
        inserer2(e, listeNoeuds, n->g + 1, h(e));

    }

    // R4: Déplacer la case vide vers le bas
    if (videX + 1 < TAILLE) {
        e = n->Etat;
        swap(&e.matrice[videX][videY], &e.matrice[videX + 1][videY]);
        inserer2(e, listeNoeuds, n->g + 1, h(e));


    }

}


int appartient(etat e, liste l) {
    noeud* temp = l.debut;
    while (temp != NULL) {
        if (memcmp(temp->Etat.matrice, e.matrice, sizeof(e.matrice)) == 0) {
            return 1; // L'état existe dans la liste
        }
        temp = temp->suivant;
    }
    return 0;
}

int g(noeud* n) {
    return n->g; // Supposons que 'g' représente déjà le coût du chemin jusqu'à ce nœud.
}
int h(etat et) {
    int cout = 0;
    for (int i = 0; i < TAILLE; i++) {
        for (int j = 0; j < TAILLE; j++) {
            if (et.matrice[i][j] != etatFinal.matrice[i][j]) {
                cout++;
            }
        }
    }
    return cout;
}
void afficherEtat(etat e) {
    for (int i = 0; i < TAILLE; i++) {
        for (int j = 0; j < TAILLE; j++) {
            printf("%c ", e.matrice[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}
int etatSolution(etat etatCourant, etat etatFinal) {
    for (int i = 0; i < TAILLE; i++) {
        for (int j = 0; j < TAILLE; j++) {
            if (etatCourant.matrice[i][j] != etatFinal.matrice[i][j]) {
                return 0; // Les états sont différents
            }
        }
    }
    return 1; // Les états sont identiques
}
noeud* rechercher(etat et, liste l) {
    noeud* temp = l.debut; // Initialisation du pointeur temporaire au début de la liste

    // Parcours de la liste
    while (temp != NULL) {
        // Comparaison de l'état du noeud avec l'état recherché
        if (memcmp(temp->Etat.matrice, et.matrice, sizeof(et.matrice)) == 0) {
            return temp; // Retourne le noeud si l'état est trouvé
        }
        temp = temp->suivant; // Passage au noeud suivant dans la liste
    }

    return NULL; // Retourne NULL si l'état n'est pas trouvé dans la liste
}

noeud* rechercher2(noeud* n, liste* l) {
    noeud* temp = l->debut; // Initialisation du pointeur temporaire au début de la liste

    // Parcours de la liste
    while (temp->suivant != NULL) {
        // Comparaison de l'état du noeud avec l'état recherché
        if (temp->g+temp->h==n->g+n->h && temp->g !=n->g) {
            printf("hh");
            return temp; // Retourne le noeud si l'état est trouvé
        }
        temp = temp->suivant; // Passage au noeud suivant dans la liste

    }

    return NULL; // Retourne NULL si l'état n'est pas trouvé dans la liste

}
void supprimer(noeud* temp, liste* listeNoeuds) {
    // Vérifier si le nœud à supprimer est le premier de la liste
    if (listeNoeuds->debut == temp) {
        listeNoeuds->debut = temp->suivant;
        free(temp);
        return;
    }

    noeud* prev = listeNoeuds->debut;
    while (prev->suivant != NULL && prev->suivant != temp) {
        prev = prev->suivant;
    }


    prev->suivant = temp->suivant;

    free(temp);
}
void trier(liste* listeNoeuds) {
    int swapped;
    do {
        swapped = 0;
        noeud* temp = listeNoeuds->debut;
        while (temp != NULL && temp->suivant != NULL) {
            // Vérification pour s'assurer qu'on ne dépasse pas la fin de la liste
            if (temp->g + temp->h > temp->suivant->g + temp->suivant->h) {
                swapNodeData(temp, temp->suivant);
                swapped = 1;
            }
            temp = temp->suivant;
        }
    } while (swapped); // Répéter jusqu'à ce qu'il n'y ait plus d'échanges
}

void afficheretat(etat et){

    printf(" [%i]--     [%i]--[%i] \n",et.matrice[0][0],et.matrice[0][1],et.matrice[0][2]);
    printf(" [%i]--[%i]--[%i] \n",et.matrice[1][0],et.matrice[1][1],et.matrice[1][2]);
    printf(" [%i]--[%i]--[%i]",et.matrice[2][0],et.matrice[2][1],et.matrice[2][2]);

}
int peutGenerer(noeud* n, etat Etat) {
    liste* intermediare = (liste*)malloc(sizeof(liste));
    initialiserListe(intermediare);
    genereSuccesseurs(n, intermediare);
    noeud* temp = intermediare->debut;
    while(temp != NULL) {
        int constante = 0;
        for(int i = 0; i < TAILLE; i++) {
            for(int j = 0; j < TAILLE; j++) {
                if(temp->Etat.matrice[i][j] == Etat.matrice[i][j]) {
                    constante++;
                }
            }
        }
        if(constante == TAILLE * TAILLE) {
            return 1;
        }
        temp = temp->suivant;
    }

    return 0;
}

liste* chemin(liste listeSuccesseurs, noeud* initial, noeud* finale) {
    liste* listeintermediaire = (liste*)malloc(sizeof(liste));
    listeintermediaire->debut = listeintermediaire->fin = NULL;
    inserer2(finale->Etat,listeintermediaire,  finale->g, finale->h); // Assurez-vous que cette fonction existe
    int k = finale->g;
    noeud* fin = finale;
    while(k > initial->g) {
        noeud* temp1 = listeSuccesseurs.debut;
        while(temp1 != NULL) {
            if(temp1->g == k - 1 && peutGenerer(temp1, fin->Etat)) {
                inserer2(temp1->Etat, listeintermediaire,  temp1->g, temp1->h); // Vérifiez cette fonction
                fin = temp1;
                k--;
                break;
            }
            temp1 = temp1->suivant;
        }
    }
    return listeintermediaire;
}
void viderListe(liste* l) {
    noeud* current = l->debut;  // Pointeur pour parcourir la liste
    while (current != NULL) {
        noeud* temp = current;  // Sauvegarder le noeud courant
        current = current->suivant;  // Passer au noeud suivant
        free(temp);  // Libérer la mémoire du noeud sauvegardé
    }
    l->debut = l->fin = NULL;  // Réinitialiser les pointeurs de début et de fin de la liste
}

void RechercheAetoile(etat etatInitial, etat etatFinal) {
    initialiserListe(&listeNoeuds);
    inserer(etatInitial, &listeNoeuds);
    NoeudsDejaTraites.debut = NULL;
    NoeudsDejaTraites.fin = NULL;
    noeud* initial = (noeud*)malloc(sizeof(noeud));
    noeud* finale = (noeud*)malloc(sizeof(noeud));
    initialiserEtat(&initial->Etat,init);
    initialiserEtat(&finale->Etat,fin);
    initial->g = 0; initial->h = h(initial->Etat);
    finale->g = 0; finale->h = h(finale->Etat);

    while (listeNoeuds.debut != NULL) {
        noeud* noeudCourant = extraire(&listeNoeuds); // Correction de l'assignation
        liste listeSuccesseurs;
        initialiserListe(&listeSuccesseurs);


        if (etatSolution(noeudCourant->Etat, etatFinal) == 1) {
            printf("Succès ! Arrêt sur l’état :\n");
            afficherEtat(noeudCourant->Etat); // Supposer que cette fonction est correctement implémentée
            return;
        } else {
            genereSuccesseurs(noeudCourant, &listeSuccesseurs);

            printf(" \nla valeur de  g = %i  et la valeur de h = %i \n",noeudCourant->g,noeudCourant->h);
            afficherEtat(noeudCourant->Etat);
            int longeur = Taille(listeSuccesseurs);
            //printf("la taille c'est = %i \n",longeur);
            noeud* n = listeSuccesseurs.debut;

            while (n != NULL) {
               //n->g = g(n) ; // calculer g(n)
                n->h = h(n->Etat); // calculer h(n)
                int f_n = n->g + n->h; // calculer f(n)
                if (!appartient(n->Etat, listeNoeuds) && !appartient(n->Etat, NoeudsDejaTraites)) {
                    inserer2(n->Etat, &listeNoeuds,n->g,n->h);
                } else if (appartient(n->Etat, listeNoeuds)) {
                    noeud* temp = rechercher(n->Etat, listeNoeuds);
                    if (f_n < temp->g + temp->h) {
                        temp->Etat = n->Etat;
                    }
                } else if (appartient(n->Etat, NoeudsDejaTraites)) {
                    noeud* temp = rechercher(n->Etat, NoeudsDejaTraites);
                    if (f_n < temp->g + temp->h) {
                        supprimer(temp, &NoeudsDejaTraites);
                        inserer2(n->Etat, &listeNoeuds,n->g,n->h);
                    }
                }

                noeud* similaire = rechercher2(noeudCourant,&listeNoeuds);
                if(similaire != NULL){
                supprimer(similaire,&listeNoeuds);}
                n = n->suivant;

            }

            noeud* temp = listeSuccesseurs.debut;

            inserer(noeudCourant->Etat, &NoeudsDejaTraites);
            //printf(" \nla valeur de  g = %i  et la valeur de h = %i \n",listeNoeuds.debut->g,listeNoeuds.debut->h);
            //afficherEtat(listeNoeuds.debut->Etat);
        }

        trier(&listeNoeuds);

    }
    printf("Pas de solution.\n");

}

int main() {

    initialiserEtat(&etatInitial, init);
    initialiserEtat(&etatFinal, fin);
  
    RechercheAetoile(etatInitial, etatFinal); // Appel de la fonction RechercheAetoile

    return 0;
}

